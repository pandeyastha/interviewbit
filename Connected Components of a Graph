void bfs(int i,vector<bool> &vis,vector<vector<int> >&adj)
{
    queue<int>q;
    q.push(i);
    vis[i]=1;
    while(!q.empty()){
        int temp=q.front();                                                      // BFS uses queue  so O(n) space worst case
        q.pop();                                                                
        for(auto x:adj[temp]){
            if(!vis[x]){
                q.push(x);
                vis[x]=1;
            }
        }
    }
}


int Solution::solve(int A, vector<vector<int> > &B) {
    vector<vector<int>> adj(A+1);
    vector<bool>vis(A+1,0);
    for(int i=0;i<B.size();i++){
        adj[B[i][0]].push_back(B[i][1]);
        adj[B[i][1]].push_back(B[i][0]);
    }
    int count=0;
    for(int i=1;i<=A;i++){
        if(!vis[i]){
            bfs(i ,vis,adj);
            count++;
        }
    }
    return count;

}
